@page "/"
@using Factory = BuildIt.Application.Factory

@if (_state.Loaded)
{
	<a>Ressources:</a>
	<br/>
	foreach (var storage in _state.Storage)
	{
		<a>@storage.Key: @storage.Value</a>
	}
	<div>
		<div>
			<div>
				Transport robots: @_state.TransportRobotCount
				<button class="btn btn-outline-success btn-sm" @onclick="HireTransportRobot">+</button>
				<button class="btn btn-outline-danger btn-sm" @onclick="DismissTransportRobot">-</button>
			</div>
			<p>Transport throughput: @_state.TransportRobotThroughput p/t</p>
		</div>
	</div>

	<button class="btn btn-primary" @onclick="SaveAsync">Save</button>
	<button class="btn btn-primary" @onclick="AddFactory">Add Factory</button>

	<div class="scrollMenu">
		@foreach (var f in _state.Factories)
		{
			<Factory Self="@f" Remove="@RemoveFactory"/>
		}
	</div>
}
else
{
	<a>Loading</a>
}

@code {

	private void DismissTransportRobot()
	{
		_state.DismissTransportRobot();
	}

	private void HireTransportRobot()
	{
		_state.HireTransportRobot();
	}

	private void AddFactory()
	{
		_state.AddFactory(new Application.Factory());
	}

	private void RemoveFactory(Factory f)
	{
		_state.RemoveFactory(f);
	}

	private async Task SaveAsync()
	{
		await StateManager.SaveAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await StateManager.LoadAsync();
			_state = StateManager.Get();
			_state.Launch();
			_timer.Enabled = true;
			StateHasChanged();
		}
	}

}